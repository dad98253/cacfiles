Downloadcacapi::Downloadcacapi(const string& username, const string& password) :
		username(username), password(password)
{
	this->ch = ecurl_easy_init();
	ecurl_easy_setopt(this->ch, CURLOPT_WRITEFUNCTION,
			Downloadcacapi::curl_write_hook);
	ecurl_easy_setopt(this->ch, CURLOPT_WRITEDATA, &this->responsebuf);
	ecurl_easy_setopt(this->ch, CURLOPT_AUTOREFERER, 1);
	ecurl_easy_setopt(this->ch, CURLOPT_FOLLOWLOCATION, 1);
	ecurl_easy_setopt(this->ch, CURLOPT_HTTPGET, 1);
	ecurl_easy_setopt(this->ch, CURLOPT_SSL_VERIFYPEER, 0); // fixme?
	ecurl_easy_setopt(this->ch, CURLOPT_CONNECTTIMEOUT, 8);
	//ecurl_easy_setopt(this->ch, CURLOPT_TIMEOUT, 60); // how long to wait for 4096? dunno...
	ecurl_easy_setopt(this->ch, CURLOPT_COOKIEFILE, "");
	ecurl_easy_setopt(this->ch, CURLOPT_TCP_KEEPALIVE, 1L);
	ecurl_easy_setopt(this->ch, CURLOPT_ACCEPT_ENCODING, ""); // this should make login/logout faster, but it might make sector upload/download slower, or just use more cpu.. hmm
	ecurl_easy_setopt(this->ch, CURLOPT_USERAGENT, "cacdrive-dev");
	this->login();
	this->cookie_session_keepalive_thread_curl = ecurl_easy_init();
	ecurl_clone_cookies(this->ch, this->cookie_session_keepalive_thread_curl);
	this->last_interaction_time = time(NULL);
	cookie_session_keepalive_thread =
			std::thread(
					[this]()->void
					{
						string unused_reply_buffer;
						ecurl_easy_setopt(this->cookie_session_keepalive_thread_curl,CURLOPT_WRITEDATA,&unused_reply_buffer);
						ecurl_easy_setopt(this->cookie_session_keepalive_thread_curl,CURLOPT_URL,"https://download.cloudatcost.com/user/settings.php");
						ecurl_easy_setopt(this->cookie_session_keepalive_thread_curl,CURLOPT_HTTPGET,1);
						ecurl_easy_setopt(this->cookie_session_keepalive_thread_curl,CURLOPT_WRITEFUNCTION,Downloadcacapi::curl_write_hook);
						for(;;)
						{
							//this_thread::sleep_for(chrono::seconds(1));
							 sleep(1);  //  added to avoid use of this_thread
							if(this->last_interaction_time==0)
							{
								// 0 is a magic value for `time to shut down`.
								return;
							}
							if(this->last_interaction_time > (time(NULL)-(20*60)))
							{
								continue;
							}
							//cout << "20min ping.. last: " << this->last_interaction_time << " - now: " << time(NULL) << endl;
							//been over 10 minutes since the last interaction, time to send a keepalive ping.
							ecurl_easy_perform(this->cookie_session_keepalive_thread_curl);
							this->last_interaction_time=time(NULL);
							unused_reply_buffer.clear();
						}
					});
} //
